import React, { useState } from "react";
import axios from "axios";
import { toast } from "react-toastify";
import { useFormik } from "formik";
import * as Yup from "yup";
import { makeStyles } from "@mui/styles";
// import { makeStyles } from "@material-ui/core";
import { provinces, educations, specialties } from "./Information";
import {
  Container,
  Grid,
  Box,
  TextField,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Typography,
} from "@mui/material";

const useStyles = makeStyles({
  button: {
    backgroundColor: "#3b82f6",
    contrastText: "#fff",
  },
  formHeader: {
    marginBottom: "1rem",
  },
  breakLine: {
    marginBottom: "1rem",
    marginTop: "1rem",
    backgroundColor: "#000",
  },
});

const formValue = {
  firstName: "",
  lastName: "",
  idNumber: "",
  medicalSystemCode: "",
  phoneNumber: "",
  officeNumber: "",
  education: "",
  specialty: "",
  province: "",
  city: "",
  address: "",
};

const validationSchema = Yup.object({
  idNumber: Yup.string().required("وارد کردن کد ملی الزامیست."),
  medicalSystemCode: Yup.string().required("وارد کردن کد نظام پزشکی الزامیست."),
  phoneNumber: Yup.string().required("شماره موبایل خود را وارد کنید."),
  officeNumber: Yup.string().required("وارد کردن شماره مطب الزامیست."),
  firstName: Yup.string().required("نام خود را وارد کنید."),
  lastName: Yup.string().required("نام خانوادگی خود را وارد کنید."),
  education: Yup.string().required("تحصیلات خود را مشخص کنید."),
  specialty: Yup.string().required("تخصص خود را مشخص کنید."),
  province: Yup.string().required("استان مورد نظر را انتخاب کنید."),
  city: Yup.string().required("شهر مورد نظر را انتخاب کنید."),
  address: Yup.string().required("وارد کردن آدرس مطب ضروری است."),
});

export default function DoctorProfileCompletion() {
  const classes = useStyles();
  const [doctor, setDoctor] = useState({ ...formValue });
  // const [doctor, setDoctor] = useState([]);
  // const [education, setEducation] = useState();
  // const [specialty, setSpecialty] = useState();
  // const [province, setProvince] = useState();
  // const [city, setCity] = useState([]);

  const formik = useFormik({
    initialValues: formValue,
    // onSubmit: (values) => setDoctor([...doctor, values]),
    // onSubmit: (values) => console.log(values),
    validationSchema: validationSchema,
  });

  const postuserHandler = (user) => {
    axios
      .post("http://127.0.0.1:8000/api/auth/token/", {
        firstName: user.firstName,
        lastName: user.lastName,
        idNumber: user.idNumber,
        medicalSystemCode: user.medicalSystemCode,
        phoneNumber: user.phoneNumber,
        officeNumber: user.officeNumber,
        education: user.education,
        specialty: user.specialty,
        province: user.province,
        city: user.city,
        address: user.address,
      })
      .then((res) => {
        setDoctor(res.data);
        document.cookie = `token=${res.data.access}`;
        document.cookie = `refresh=${res.data.refresh}`;
        toast.success("اطلاعات شما با موفقیت ثبت شد.", {
          position: "top-right",
          autoClose: 2000,
        });
      })
      // add style to toast
      .catch((err) => {
        toast.error("مشکلی پیش آمده", {
          position: "top-right",
          autoClose: 2000,
        });
      });
  };

  // function handleChanges(event) {
  //   const { name, value } = event.target;
  //   if (name === "education") {
  //     setEducation(value);
  //   } else if (name === "specialty") {
  //     setSpecialty(value);
  //   } else if (name === "province") {
  //     setProvince(value);
  //   } else if (name === "city") {
  //     setCity(value);
  //   }
  // }
  // function handleChanges(event) {
  //   const { name, value } = event.target;
  //   setDoctor((prevValue) => {
  //     return {
  //       ...prevValue,
  //       [name]: value,
  //     };
  //   });
  //   // if (name === "province") {
  //   //   setCities(provinces.find((province) => province.name === value).cities);
  //   // }
  //   if (name === "province") {
  //     // setCities(provinces.find((province) => province.name === value).cities);
  //     console.log(doctor);
  //   }
  // }

  function handleSubmit(event) {
    // event.preventDefault();
    // console.log(doctor);
    postuserHandler(doctor);
    event.preventDefault();
  }

  return (
    <Container>
      <Box
        sx={{
          marginTop: "110px",
          bgcolor: "rgb(245, 246, 248)",
          height: "80%",
          border: "1px solid black",
          borderRadius: "10px",
          padding: "20px",
          "& .MuiTextField-root": { m: 0 },
          boxShadow: "0 0 10px 0 rgba(0,0,0,0.5)",
        }}
        // onSubmit={formik.handleSubmit}
        onSubmit={handleSubmit}
        component="form"
        method="post"
      >
        {/* <form
          noValidate
          autoComplete="off"
          //  onSubmit={formik.handleSubmit}
          onSubmit={handleSubmit}
        > */}
        <Grid>
          <Typography
            className={classes.formHeader}
            align="center"
            variant="h5"
            component="h5"
          >
            تکمیل اطلاعات پزشک
          </Typography>
        </Grid>
        <hr className={classes.breakLine} />
        <Grid container spacing={2}>
          <Grid item xs={12} md={6}>
            <TextField
              onChange={(e) => {
                setDoctor({ ...doctor, firstName: e.target.value });
              }}
              label="نام"
              variant="outlined"
              name="firstName"
              type="text"
              fullWidth
              required
              // onChange={formik.handleChange}
              // id="outlined-basic"
              // value={formik.values.firstName}
              // error={
              //   formik.errors["firstName"] && formik.touched["firstName"]
              // }
              // helperText={
              //   formik.touched.firstName && formik.errors["firstName"]
              // }
              // {...formik.getFieldProps("firstName")}
              // formik = {...formik.getFieldProps('firstName')}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              onChange={(e) => {
                setDoctor({ ...doctor, lastName: e.target.value });
              }}
              variant="outlined"
              label="نام خانوادگی"
              name="lastName"
              type="text"
              fullWidth
              required
              // id="outlined-basic"
              // onChange={formik.handleChange}
              // error={formik.touched["lastName"] && formik.errors["lastName"]}
              // value={formik.values.lastName}
              // helperText={
              //   formik.touched.lastName && formik.errors["lastName"]
              // }
              // {...formik.getFieldProps("lastName")}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              onChange={(e) => {
                setDoctor({ ...doctor, idNumber: e.target.value });
              }}
              variant="outlined"
              label="کد ملی"
              name="idNumber"
              fullWidth
              required
              // onChange={formik.handleChange}
              // id="outlined-basic"
              // error={formik.touched["idNumber"] && formik.errors["idNumber"]}
              // value={formik.values.idNumber}
              // helperText={
              //   formik.touched.idNumber && formik.errors["idNumber"]
              // }
              // {...formik.getFieldProps("idNumber")}
              // required
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <TextField
              onChange={(e) => {
                setDoctor({ ...doctor, medicalSystemCode: e.target.value });
              }}
              variant="outlined"
              label="کد نظام پزشکی"
              name="medicalSystemCode"
              fullWidth
              required
              // id="outlined-basic"
              // value={formik.values.medicalSystemCode}
              // onChange={formik.handleChange}
              // error={
              //   formik.touched["medicalSystemCode"] &&
              //   formik.errors["medicalSystemCode"]
              // }
              // helperText={
              //   formik.touched.medicalSystemCode &&
              //   formik.errors["medicalSystemCode"]
              // }
              // {...formik.getFieldProps("medicalSystemCode")}
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <TextField
              onChange={(e) => {
                setDoctor({ ...doctor, phoneNumber: e.target.value });
              }}
              variant="outlined"
              label="شماره موبایل"
              name="phoneNumber"
              fullWidth
              required
              // id="outlined-basic"
              // value={formik.values.phoneNumber}
              // onChange={formik.handleChange}
              // error={
              //   formik.touched["phoneNumber"] && formik.errors["phoneNumber"]
              // }
              // helperText={
              //   formik.touched.phoneNumber && formik.errors["phoneNumber"]
              // }
              // {...formik.getFieldProps("phoneNumber")}
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <TextField
              onChange={(e) => {
                setDoctor({ ...doctor, officeNumber: e.target.value });
              }}
              variant="outlined"
              label="شماره تلفن مطب"
              name="officeNumber"
              fullWidth
              required
              // onChange={formik.handleChange}
              // id="outlined-basic"
              // value={formik.values.officeNumber}
              // error={
              //   formik.touched["officeNumber"] &&
              //   formik.errors["officeNumber"]
              // }
              // helperText={
              //   formik.touched.officeNumber && formik.errors["officeNumber"]
              // }
              // {...formik.getFieldProps("officeNumber")}
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <FormControl fullWidth>
              <InputLabel>تحصیلات پزشک</InputLabel>
              <Select
                onChange={(e) => {
                  setDoctor({ ...doctor, education: e.target.value });
                }}
                label="تحصیلات پزشک"
                required
                // value={education}
                // onChange={handleChanges}
                // onChange={formik.handleChange}
                // {...formik.getFieldProps("education")}
                // value={formik.values.education}
                // // value={doctor.education}
                // error={
                //   formik.touched["education"] && formik.errors["education"]
                // }
                // helperText={
                //   formik.touched.education && formik.errors.education
                // }
              >
                {/* {educations.map((education) => (
                  <MenuItem>{education}</MenuItem>
                ))} */}
                <MenuItem value={1}>عمومی</MenuItem>
                <MenuItem value={2}>متخصص</MenuItem>
                <MenuItem value={3}>فوق تخصص</MenuItem>
                <MenuItem value={4}>کارشناس</MenuItem>
                <MenuItem value={5}>مشاور</MenuItem>
                <MenuItem value={6}>کارشناس ارشد</MenuItem>
                <MenuItem value={7}>فلوشیپ</MenuItem>
                <MenuItem value={8}>دکترا</MenuItem>
                <MenuItem value={9}>سایر</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} md={6}>
            <FormControl fullWidth>
              <InputLabel>تخصص</InputLabel>
              <Select
                onChange={(e) => {
                  setDoctor({ ...doctor, specialty: e.target.value });
                }}
                label="تخصص"
                name="specialty"
                required
                // onChange={handleChanges}
                // onChange={formik.handleChange}
                // value={doctor.specialty}
                // value={specialty}
                // error={
                //   formik.touched["specialty"] && formik.errors["specialty"]
                // }
                // helperText={
                //   formik.touched.specialty && formik.errors.specialty
                // }
                // {...formik.getFieldProps("specialty")}
              >
                <MenuItem value={1}>آسیب شناسی</MenuItem>
                <MenuItem value={2}>جراحی کودکان</MenuItem>
                <MenuItem value={3}>سونوگرافی</MenuItem>
                <MenuItem value={4}>ارتوپدی کودکان</MenuItem>
                <MenuItem value={5}>نفرولوژی</MenuItem>
                <MenuItem value={6}>جراحی سر و گردن</MenuItem>
                <MenuItem value={7}>جراحی سرطان</MenuItem>
                <MenuItem value={8}>زنان، زایمان و نازایی</MenuItem>
                <MenuItem value={9}>بهداشت خانواده</MenuItem>
                <MenuItem value={10}>سایر</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} md={6}>
            <FormControl fullWidth>
              <InputLabel>استان</InputLabel>
              <Select
                onChange={(e) => {
                  setDoctor({
                    ...doctor,
                    province: provinces.find((p) => {
                      if (p.id === e.target.value) {
                        return p.name;
                      }
                    })["name"],
                  });
                }}
                // onChange={(e) => {
                //   setDoctor({
                //     ...doctor,
                //     province: provinces.find((p) => p.id === e.target.value),
                //   });
                // }}

                name="province"
                label="استان"
                required
                // onChange={handleChanges}
                // value={province}
                // error={
                //   formik.touched["province"] && formik.errors["province"]
                // }
                // helperText={formik.touched.province && formik.errors.province}
                // {...formik.getFieldProps("province")}
              >
                {provinces.map((province) => (
                  <MenuItem value={province.id}>{province.name}</MenuItem>
                ))}
                {/* <MenuItem value={1}>آذربایجان شرقی</MenuItem>
                <MenuItem value={2}>آذربایجان غربی</MenuItem>
                <MenuItem value={3}>اصفهان</MenuItem>
                <MenuItem value={4}>اردبیل</MenuItem>
                <MenuItem value={5}>ایلام</MenuItem>
                <MenuItem value={6}>بوشهر</MenuItem>
                <MenuItem value={7}>تهران</MenuItem>
                <MenuItem value={8}>خراسان جنوبی</MenuItem>
                <MenuItem value={9}>فارس</MenuItem>
                <MenuItem value={10}>سایر</MenuItem> */}
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} md={6}>
            <FormControl fullWidth>
              <InputLabel>شهر</InputLabel>
              <Select
                onChange={(e) => {
                  setDoctor({ ...doctor, city: e.target.value });
                }}
                label="شهر"
                name="city"
                // required
                // onChange={handleChanges}
                // value={doctor.city}
                // error={formik.touched["city"] && formik.errors["city"]}
                // helperText={formik.touched.city && formik.errors.city}
              >
                {/* {cities.map((city, index) => (
                  <MenuItem value={index}>{city}</MenuItem>
                ))} */}
                {/* {doctor.province &&
                  provinces
                    .find((province) => province.id === doctor.province)
                    .cities.map((city, index) => (
                      <MenuItem value={index}>{city[index]}</MenuItem>
                    ))} */}
                {/* {(selected_province == "تهران") && (
                  <MenuItem value={1}>تهران</MenuItem>
                )} */}
                {/* <MenuItem value={1}>همه شهر های استان</MenuItem>
                <MenuItem value={2}>آران و بیدگل</MenuItem>
                <MenuItem value={3}>اردستان</MenuItem>
                <MenuItem value={4}>اصفهان</MenuItem>
                <MenuItem value={5}>باغ بهادران</MenuItem>
                <MenuItem value={6}>بهارستان</MenuItem>
                <MenuItem value={7}>تیران</MenuItem>
                <MenuItem value={8}>حاجی آباد</MenuItem>
                <MenuItem value={9}>سمیرم</MenuItem>
                <MenuItem value={10}>سایر</MenuItem> */}
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} md={12}>
            <TextField
              onChange={(e) => {
                setDoctor({ ...doctor, address: e.target.value });
              }}
              variant="outlined"
              label="آدرس مطب"
              name="address"
              type="text"
              multiline
              rows={2}
              fullWidth
              required
              // onChange={handleChanges}
              // error={formik.errors["address"] && formik.touched["address"]}
              // helperText={formik.errors["address"]}
            />
          </Grid>

          <Grid item md={12} xs={12}>
            {/* <button type="submit">ذخیره اطلاعات</button> */}
            <Button
              className={classes.button}
              type="submit"
              variant="contained"
              // sx={{ color: "#3b82f6", contrastText: "#fff" }}
            >
              ذخیره اطلاعات
            </Button>
          </Grid>
        </Grid>
        {/* </form> */}
      </Box>
    </Container>
  );
}
